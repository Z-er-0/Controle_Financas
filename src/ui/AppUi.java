package ui;

import java.time.format.DateTimeFormatter;
import model.Operacao;
import model.Conta;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.List;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Collections;
import model.Despesa;
import model.Natureza;
import model.Receita;
import model.TipoDespesa;
import model.TipoReceita;

/**
 *
 * @author 
 */
public class AppUi extends javax.swing.JFrame {

    private Conta conta;

    public AppUi() {

        conta = new Conta();

        initComponents();

        txtHoje.setText(String.valueOf(LocalDate.now().getDayOfMonth() + "/" + LocalDate.now().getMonthValue() + "/" + LocalDate.now().getYear()));

        ArrayList<Operacao> operacoesData = new ArrayList<>();

        for (Operacao operacao : conta.getOperacoes()) {
            operacoesData.add(operacao);
            System.out.println(operacao.getValor());
        }
        Collections.sort(operacoesData, (op1, op2) -> op1.getData().compareTo(op2.getData()));

        double saldoAtual = 0;
        for (Operacao operacao : operacoesData) {
            if (!operacao.getData().isAfter(LocalDate.now())) {
                if (operacao.getNatureza().equals(Natureza.RECEITA)) {
                    saldoAtual += operacao.getValor();
                } else {
                    saldoAtual -= operacao.getValor();
                }
            }
        }

        txtSaldoAtual.setText("R$" + saldoAtual);
        txtSaldoAtual.setText("R$" + saldoAtual);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        txtHoje = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        txtSaldoAtual = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        btnAdcOp = new javax.swing.JButton();
        btnConsOp = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Hoje"));

        txtHoje.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        txtHoje.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        txtHoje.setText("DD/MM/YYYY");
        txtHoje.setToolTipText("");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtHoje)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(txtHoje, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Saldo Atual"));

        txtSaldoAtual.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        txtSaldoAtual.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        txtSaldoAtual.setText("R$");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtSaldoAtual, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(txtSaldoAtual, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Operações"));

        btnAdcOp.setText("Adicionar Operação");
        btnAdcOp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdcOpActionPerformed(evt);
            }
        });

        btnConsOp.setText("Consultar Operações");
        btnConsOp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConsOpActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAdcOp, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnConsOp, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(8, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnAdcOp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnConsOp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //Botão "Adicionar Operação"
    private void btnAdcOpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdcOpActionPerformed
        // TODO add your handling code here:
        InclusaoOp inclusaoOp = new InclusaoOp(this, true, this.conta, this.conta.getSaldo());
        inclusaoOp.setVisible(true);
        Operacao operacao = inclusaoOp.getOperacao();
        if (operacao != null) {
            //operacao.operar(conta, operacao.getValor());
            conta.inserirOperacao(conta, operacao);
        }
        this.atualizarSaldo();

    }//GEN-LAST:event_btnAdcOpActionPerformed

    //Botão "Consultar Operações"
    private void btnConsOpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConsOpActionPerformed
        // TODO add your handling code here:
        atualizarSaldo();
        ListagemOp listagemOp = new ListagemOp(this, true, conta);
        listagemOp.definirConta(conta);
        listagemOp.setVisible(true);

        try {
            salvarOperacoesCSV();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnConsOpActionPerformed

    public void atualizarSaldo() {
        conta.setSaldo(0);

        ArrayList<Operacao> operacoesData = new ArrayList<>();

        for (Operacao operacao : conta.getOperacoes()) {
            operacoesData.add(operacao);
        }
        Collections.sort(operacoesData, (op1, op2) -> op1.getData().compareTo(op2.getData()));

        double saldoAtual = 0;
        for (Operacao operacao : operacoesData) {
            if (!operacao.getData().isAfter(LocalDate.now())) {
                if (operacao.getNatureza().equals(Natureza.RECEITA)) {
                    saldoAtual += operacao.getValor();
                } else {
                    saldoAtual -= operacao.getValor();
                }
            }
        }
        conta.setSaldo(saldoAtual);

        txtSaldoAtual.setText("R$" + saldoAtual);

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AppUi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AppUi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AppUi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AppUi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                AppUi appUi = new AppUi();
                appUi.setVisible(true);

                try {
                    appUi.abrirOperacoesCSV();
                } catch (IOException e) {
                    e.printStackTrace();
                }
                
            }

        });
        
    }

    public List<Operacao> getOperacoes() {
        return conta.getOperacoes();
    }

    private void salvarOperacoesCSV() throws IOException {

        String dados = "operacoes.csv";
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(dados))) {

            // Escrever o cabeçalho do arquivo
            writer.write("Data;Valor;Natureza;Tipo;Saldo;Numero");
            writer.newLine();

            // Escrever as operações no arquivo
            for (Operacao operacao : conta.getOperacoes()) {
                String data = operacao.getData().format(DateTimeFormatter.ofPattern("yyyy/MM/dd"));
                double valor = operacao.getValor();
                String natureza = operacao.getNatureza().name();
                int numero = operacao.getNumero();
                double saldo = operacao.getSaldo();

                String tipo;

                if (operacao.getNatureza().equals(Natureza.RECEITA)) {
                    Receita receita = (Receita) operacao;
                    tipo = receita.getTipoReceita().name();
                } else {
                    Despesa despesa = (Despesa) operacao;
                    tipo = despesa.getTipoDespesa().name();
                }

                writer.write(data + ";" + valor + ";" + natureza + ";" + tipo + ";" + saldo  + ";" + numero);
                writer.newLine();
            }
        }
    }

    private void abrirOperacoesCSV() throws IOException {
        String nomeArquivo = "operacoes.csv";
        File arquivo = new File(nomeArquivo);

        if (arquivo.exists()) {
            String linha;

            try (BufferedReader reader = new BufferedReader(new FileReader(nomeArquivo))) {
                // Ler o cabeçalho do arquivo
                reader.readLine();

                ArrayList<Operacao> operacoesNuvem = new ArrayList<>();

                // Ler as operações do arquivo
                while ((linha = reader.readLine()) != null) {
                    String[] dados = linha.split(";");

                    String dataStr = dados[0];
                    double valor = Double.parseDouble(dados[1]);
                    LocalDate data = LocalDate.parse(dataStr, DateTimeFormatter.ofPattern("yyyy/MM/dd"));
                    Operacao operacao;

                    if (dados[2].equals("RECEITA")) {

                        operacao = new Receita(null, valor, data);
                        Receita receita = (Receita) operacao;
                        receita.setNatureza(Natureza.RECEITA);

                        if (dados[3].equals("SALARIO")) {
                            receita.setTipoReceita(TipoReceita.SALARIO);
                        } else if (dados[3].equals("DECIMO")) {
                            receita.setTipoReceita(TipoReceita.DECIMO);
                        } else if (dados[3].equals("FERIAS")) {
                            receita.setTipoReceita(TipoReceita.FERIAS);
                        } else {
                            receita.setTipoReceita(TipoReceita.OUTRA);
                        }

                    } else {

                        operacao = new Despesa(null, valor, data);
                        Despesa despesa = (Despesa) operacao;
                        despesa.setNatureza(Natureza.DESPESA);

                        if (dados[3].equals("ALIMENTACAO")) {
                            despesa.setTipoDespesa(TipoDespesa.ALIMENTACAO);
                        } else if (dados[3].equals("TRANSPORTE")) {
                            despesa.setTipoDespesa(TipoDespesa.TRANSPORTE);
                        } else if (dados[3].equals("RESIDENCIA")) {
                            despesa.setTipoDespesa(TipoDespesa.RESIDENCIA);
                        } else if (dados[3].equals("SAUDE")) {
                            despesa.setTipoDespesa(TipoDespesa.SAUDE);
                        } else if (dados[3].equals("EDUCACAO")) {
                            despesa.setTipoDespesa(TipoDespesa.EDUCACAO);
                        } else if (dados[3].equals("ENTRETENIMENTO")) {
                            despesa.setTipoDespesa(TipoDespesa.ENTRETENIMENTO);
                        } else {
                            despesa.setTipoDespesa(TipoDespesa.OUTRA);
                        }

                    }

                    operacoesNuvem.add(operacao);

                }

                for (Operacao operacao : operacoesNuvem) {
                    conta.inserirOperacao(conta, operacao);
                }

                atualizarSaldo();
                System.out.println("Arquivo " + nomeArquivo + " aberto e operações carregadas.");
            }
        }

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdcOp;
    private javax.swing.JButton btnConsOp;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JLabel txtHoje;
    private javax.swing.JLabel txtSaldoAtual;
    // End of variables declaration//GEN-END:variables
}
